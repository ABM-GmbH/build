
# This example shows performing system feature checks in Boost.Build,
# e.g. to check for some system function or compiler feature.

# First, declare a metatarget that we'll try to build.
obj feature : feature.cpp ;
# Make it explicit so that it's only build if used by a configure check
explicit feature ;

# Declare a target that uses a feature.
exe main 
    : main.cpp 
    # The check-target-builds invocation in requirements section will
    # - build the specified metataget
    # - if it builds OK, add the properties in the second parameter
    # - otherwise, add the properties in the third parameter
    : [ check-target-builds feature : <define>FEATURE=1 : <define>FEATURE=0 ] 
    ;

# To test this:
#
# 1. Build with "b2". You should see a "feature builds: yes" message, and running
#    the produced executable will show that feature is present.
# 2. Modify feature.cpp to contain a compile error, rebuild with 
#    "b2 -a --reconfigure". You should see a "feature builds: no" message, and running 
#    the produced executable should show that the feature is not present.
#
# The output from check checks is not shown on the console, instead it is
# redirected to the bin/config.log file
